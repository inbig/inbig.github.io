---
layout: post
title:  "[github] 깃? 깃허브? 깃의 개념과 깃허브 기초 사용법"
date:   2020-08-14 12:02:44
categories: [Basic]
author : 조의찬
---

코드작업이 많아지는 현대 사회에서 깃허브는 프로그래머에게 없어서는 안 될 존재가 되었다. <br>
대체 깃허브가 무엇이길래 프로그래머들에게 필수 요소가 되었을까? <br>
이번 포스팅에서 이 의문점을 해결해보자.<br>


|깃(git)의 개념과 장점|

깃허브를 정확히 이해하기 위해서는 깃(git)을 알아야한다.<br>

<img src="{{ site.baseurl }}/images/d4/d4_0.png" width="30%" height="30%">


<p>깃이란 소스코드 버전 관리 시스템을 말한다.<br>
소스코드 버전 관리 시스템? <br>
소스코드와 버전 관리 시스템을 나눠서 생각하면 이해가 빠를 것이다.<br></p>
소스코드란 프로그램을 구성하고 있는 코드를 말한다.<br>
코드라는 용어가 일생활에서 접하기 쉬워 이해가 어렵지 않을 것이다.<br>
그렇다면 버전관리시스템이란 무엇일까? <br>


<img src="{{ site.baseurl }}/images/d4/d4_1.png" width="60%" height="60%">

개발자는 프로그램을 만들 때 수차례 작업을 통해 프로그램을 완성할 것이다. <br>
또 이미 프로그램이 출시되었어도 더 나은 결과물을 위해 계속 개정을 거치게 된다. <br>
이런 과정을 수차례 반복하다보면 개발자는 자신이 언제 어떤 작업을 했는지 기억하기 어려워진다. <br>
그래서 등장한 개념이 바로 버전이다.<br>
버전은 작업을 완성할때마다 해당시점을 기록해놓은 것을 말한다.<br>
8월 12일의 결과물은 버전 1, 8월 13일의 결과물은 버전2,.... <br>
이런 식으로 작업완성시점을 버전으로 기록해두면 개발자는 자신의 코드를 보수하거나 개발할 때 큰 도움을 받을 수 있다. <br>
즉, 버전관리시스템이란 개발자가 원하는 시점(버전)으로 이동해 작업할 수 있게 해주는 것을 말한다. 

<p>그렇다면 왜 개발자들은 깃을 사용할까? <br>
깃(git)은 대표적으로 다음과 같은 장점이 있다. <br>
1. 오류가 발생하거나 소스코드끼리 충돌할 때 무사히 기존작업시점으로 돌아갈 수 있다.<br>
2. 협업이 가능해진다. <br>
이러한 장점은 프로그램 개발을 할때 매우 중요한 요소이다. 따라서 깃은 프로그래머들에게 빼놓을 수 없는 존재로 자리잡고 있다.</p>




|그러면 깃허브(git)는??|

<img src="{{ site.baseurl }}/images/d4/d4_2.png" width="60%" height="60%">


깃허브는 깃(git)을 호스팅해주는 대표적인 사이트다.<br>
깃(git)을 웹으로 호스팅함으로써  개발자는 인터넷을 통해 깃(git)을 관리할 수 있다.<br>
깃(git) 호스팅 사이트는 깃허브(GITHUB) 이외에도 GITLAB.com, BITBUTCKET.org 등 다양하다.<br>
그런데 깃허브(GITHUB)를 제일 많이 사용하다보니 깃허브(GITHUB)가 깃 호스팅 사이트의 대명사로 쓰인다.<br>


종합해보면 다음과 같다. <br>
**깃(git) : 소스코드 버전 관리 시스템** <br>
**깃(github) : 대표적인 깃(git) 호스팅 사이트**<br>



|깃허브 작동원리|

<img src="{{ site.baseurl }}/images/d4/d4_3.png" width="60%" height="60%">

위 그림은 깃허브의 작동원리를 보여준다.<br>
인터넷을 통해 깃을 관리하려면 내 로컬컴퓨터에 있는 코드들을 웹으로 보내줘야한다.<br>
이 것을 우리는 push한다고 한다. 인터넷(깃허브)에 업로드한다고 생각하면 편하다. <br>
반대로 작업을 하다보면  깃허브에 저장되어있는 깃을 로컬로 내려받아야하는 경우도 생긴다. <br>
이 것을 우리는 pull이라고 한다. 다운로드의 개념과 유사하다.<br>



|일반적인 깃허브 작업 프로세스(push)|



1. **git init** : 깃 초기화 (세팅 시작)
2. **git add <파일>** : 깃 업로드 준비
3. **git commit -m "커밋 메시지"** : 깃 업로드 승인 및 버전 기록
4. **git push** : 깃 업로드



|배운 점과 앞으로의 과제|

원하는 버전으로 돌아갈 떄 쓰는 깃 명령어를 공부해야겠다.<br>
깃의 브랜치 개념을 공부해야겠다.


# 출처 : https://datata29.github.io